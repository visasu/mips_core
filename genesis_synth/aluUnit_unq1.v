//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11904 $ --- $Date: 2013/08/03 $   |
//	-----------------------------------------------
//	
//
//  Source file: /afs/asu.edu/users/v/s/r/vsriva10/EEE591/HW2/starter-02/primitives/aluUnit.vp
//  Source template: aluUnit
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

//aluUnit.vp

module aluUnit_unq1(
	input logic [14:0]  aluCtrl,
	input logic [31:0]  src0,
	input logic [31:0]  src1,
	input logic [4:0] shamt,
	output logic [31:0] aluOut
);

		always_comb begin
		case(aluCtrl)
			15'd1         :  begin 
						aluOut  = src0 + src1; 				// ADD 
					    end
			15'd2         :   begin 
						aluOut = src0 + src1; 				// ADDI
					    end
			15'd4         :  begin
						aluOut = src0 + src1;				// LW 
					    end	
			15'd8         :  begin
						aluOut = src0 + src1;				// SW 
					    end	
			15'd16        :  begin 
						aluOut   = src0 & src1; 			// AND 
					    end
			15'd32        :  begin 
						aluOut   = src0 & src1; 			// ANDI
					    end 
			15'd64        :  begin 
						aluOut   = ~(src0 |src1); 			// NOR 
					    end 
			15'd128       :  begin 
						aluOut   = src0 | src1;				// OR
					    end 
			15'd256       :  begin 
						aluOut   = src0 | src1;				// ORI
					    end 
			15'd512       :  begin 
						aluOut   = (src0 < src1) ? 1 : 0;		// SLT 
					    end 
			15'd1024	 :  begin 
						aluOut   = (src0 < src1) ? 1 : 0;		// SLTI
					    end 
			15'd2048	 :  begin 
						aluOut   = src1 >> shamt;			// SRA
					    end 
			15'd4096	 :  begin 
						aluOut   = src0 - src1;				// SUB
					    end 
			15'd8192	 :  begin 
						aluOut   = src0 ^ src1;				// XOR
					    end 
			15'd16384	 :  begin 
						aluOut   = src0 ^ src1;				// XORI
					    end 
			default          : begin
						aluOut  = 32'b0; 				// ADDIU
					   end	
		endcase
	end

endmodule // aluUnit_unq1
