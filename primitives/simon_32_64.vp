// simon_32_64.vp
//; my $dW = parameter( name=>"dataWidth", val=>16, doc=>"Width of input");
//; my $kW = parameter( name=>"keyWidth", val=>16, doc=>"Width of keys");
//; my $m = parameter( name=>"keyring", val=>4, doc=>"Keys in ring");
//; my $t = parameter( name=>"cycles", val=>34, doc=>"No.of Cycles");


//Generate module

module `mname` (
input clk, 
input reset,
input [`2*$dW-1`:0] plaintext,
input [`4*$kW-1`:0] key,
output [`2*$dW-1`:0] ciphertext
);
	reg [`2*$dW-1`:0] ciphertext_reg;

	reg [`$kW-1`:0] k [`$t-1`:0];

	reg [0:`2*$dW-2`] z; //Inverted due to indexing 

	reg [`$dW-1`:0] x [`$t-1`:0];

	wire [`2*$dW-1`:0] ciphertext_w;

	wire [`$kW-1`:0] k_w [`$t-1`:0];
	wire [`$kW-1`:0] k_out [`$t-1`:0];

	wire [`2*$dW-2`:0] z_in;

	wire [`$dW-1`:0] x_w [`$t-1`:0];


///////////////Floping I/Os///////////////////////
	always@(posedge clk or negedge reset)
	begin
		x[0]<=plaintext[`$dW-1`:0];
		x[1]<=plaintext[`2*$dW-1`:`$dW`];

//; for(my $i=2;$i<$t;$i++){
		x[`$i`]<=x_w[`$i`];
//;	}
		ciphertext_reg<=ciphertext_w;

//; for(my $i=0;$i<$t;$i++){
		k[`$i`]<=k_w[`$i`];
//;	}
		z<=z_in;
	end

////////////////Reset logic before I/Os/////////////////
	assign ciphertext_w = {x[`$t-1`],x[`$t-2`]};

///////////////// c ^ (z0)j/////////////////////////////////////////
//Pending Confirmation

	assign z_in = 31'b1111101000100101011000011100110;

/////////////key generator////////////////////////////
//Some pending changes
//; for(my $i=0;$i<$m;$i++){
	assign k_w[`$i`] = key[`15+16*$i`:`16*$i`];
//;	}
	
//; for(my $i=$m;$i<$t;$i++){
	assign k_w[`$i`] = (k[`$i-4`] ^ ({k[`$i-1`][2:0],k[`$i-1`][`$kW-1`:3]} ^ k[`$i-3`]) ^ ({k[`$i-1`][3:0],k[`$i-1`][`$kW-1`:4]} ^ {k[`$i-3`][0],k[`$i-3`][`$kW-1`:1]}) ^ (16'd65532 ^ z[`$i-4`])) ;

//;	}
//; for(my $i=0;$i<$t;$i++){
	assign k_out[`$i`] = reset ? `$kW`'d0 : k[`$i`] ;

//;	}

 
///////////////Round Function//////////////////////////
//Pending Confirmation

	assign ciphertext= ciphertext_reg;
//; for(my $i=0;$i<$t-2;$i++){
	assign x_w[`$i+2`] = (x[`$i`] ^ ({x[`$i+1`][`$dW-2`:0],x[`$i+1`][`$dW-1`]} & {x[`$i+1`][`$dW-9`:0],x[`$i+1`][`$dW-1`:`$dW-8`]}) ^ {x[`$i+1`][`$dW-3`:0],x[`$i+1`][`$dW-1`:`$dW-2`]} ^ k_out[`$i`]) ;

//;	}

endmodule: `mname`




