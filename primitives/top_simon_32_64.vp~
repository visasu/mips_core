// top_conv5.vp
// A top module has no inputs or outputs
module `mname` ();
//; #Instantiating a module in gen2 requires an extra
//; # step where we generate the module, then instance it
//; my $hw = generate_base('simon_32_64', 'my_simon_32_64');
//; # We can querry the value of parameters

 


reg clk_tb, reset_tb;
reg [31:0] plaintext;
reg [63:0] key;
wire [31:0] ciphertext;

logic triggerStart, triggerStop, foo;

initial begin
//    $dumpfile("dump.vcd");
//    $dumpvars(1, fifo_tb);  
	triggerStart = 1'b0;
	triggerStop = 1'b0;
	#10
	triggerStart = 1'b1;
	
	clk_tb = 0;
	reset_tb =1'b0;

	plaintext=32'hE479F91D;
	key=64'h3106206548720674;	
    #10 reset_tb = 1'b1;
    #20 reset_tb = 1'b0;

	repeat(70) #10 clk_tb=~clk_tb;

	triggerStop = 1'b1 ;
	#10
	$finish();


end
// # Then we can instantiate our DUT
// Code your testbench here
// or browse Examples

//; my $region = "my_simon_32_64";
//Capture the waves in top_conv5.vp
	initial begin
		//if this is a "+wave" run, it must record all signals
		if ( $test$plusargs("wave") ) begin
			$display("%t: Starting Wave Capture", $time);
			// levels, instance
			$vcdpluson (0, `$region`);
			$vcdplusmemon (0, `$region`);
		end
	end //intial begin  
// # Then we can instantiate out DUT

//; my $region = $self->mname() ;
	initial begin
		foo = 1'b0;
		#1
		//$set_gate_level_monitoring("rtl_on");
		//$set_gate_level_monitoring("mda");
		$set_gate_level_monitoring("rtl_on", "sv");
		$set_gate_level_monitoring("rtl_on", "mda");
		#1
		$set_toggle_region(`$region`);
		#1
		@( posedge triggerStart);
		$display( "Starting Toggle Collection");
		$toggle_start();
		#100000000000000000000
		foo = 1'b1;
	end
	
	initial begin
		#1
		@( posedge triggerStart);
		#1
		@(posedge triggerStop);
		$display("Stopping Toggle Collection");
		#1
		$toggle_stop();
		#1
		$toggle_report("top.saif", 1.0e-12, `$region`);
	end

	`$hw->instantiate` (.plaintext(plaintext), .key(key), .clk(clk_tb), .reset(reset_tb), .ciphertext(ciphertext));

endmodule: `mname`

