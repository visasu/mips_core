// HelloWorld.vp  
//;
//; # Any Line that starts with a slash slash semi-colon is perl
//; # So we can follow our good habits from before
//; use strict ;                   # Use a strict interpretation
//; use warnings FATAL=>qw(all);   # Turn warnings into errors
//; use diagnostics ;              # Print helpful info, for errors
//;
//; print STDOUT "Ofer S. says Hello World\n";
//;
//; # Genesis2 Allows us to create parameters
//; my $bW = parameter( name=>"bitWidth", val=>8, doc=>"Width of input");
//;
//; # Any expression contained in back-ticks is evaluated to a string
//; # and printed in-line ... for example :

// The bitwidth of this module is `$bW` 

// We use the gen2 builtin mname to indicate the module name
//  This is because module names are derived from the generator
//  file name, where uniquely generated files are given a unique name.
module `mname` (
       input  logic [`$bW-1`:0] a,
       input  logic [`$bW-1`:0] b,

       input logic clk ,
       input logic rst ,

       output logic [`$bW`:0] z 
       );
       assign z = a + b ;
endmodule: `mname`
